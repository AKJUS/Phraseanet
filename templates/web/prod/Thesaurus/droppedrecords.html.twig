
<h3 style="color: red">POC/Experimental.</h3>

{% if error %}

    {{ error }}

{% else %}

    {% if rejected_cnt > 0 %}
        you don't have rights to edit {{ rejected_cnt }} record(s)
    {% endif %}

    <form id="DroppedOnTH_form">
        <table>
            <tr>
                <th>value</th>
                <th><span class="fieldSelected" style="display: none">operation</span></th>
                <th>to field</th>
            </tr>
        {% if up_paths|length > 1 %}
            <tr class="moreFields">
                <td colspan="3">
                    <button>+</button>&nbsp;Other value(s)...
                </td>
            </tr>
        {% endif %}
        {% set n=1 %}
        {% for tid,up_path in up_paths %}
            {% set cl = (n == up_paths|length) ? "" : "class='other' style='display:none'"%}
            <tr {{ cl|raw }}>
                <td>
{#                    {% if up_path.synonyms|length == 1 %} #}{# too bad : we must use a select event for one option...  #}
{#                        {% set synonym = up_path.synonyms|first %}#}
{#                        <input type="text" class="uneditable-input" value={{ synonym.value }} /> #}{# bad align because we changed "select" margins #}
{#                    {% else %}#}
                    <select class="synonym _{{ n }}">
                    {% for synonym in up_path.synonyms %}
                        <option {{ synonym.selected ? "selected" : "" }}>{{ synonym.value }}</option>
                    {% endfor%}
                    </select>
{#                    {% endif %}#}
                </td>
                <td>
                    <select class="actionSelect mono _{{ n }}">
                        <option class="mono" value="set">set to</option>
                        <option class="mono" value="delete">delete from</option>
                    </select>
                    <select class="actionSelect multi _{{ n }}">
                        <option class="multi" value="add">add to</option>
                        <option class="multi" value="replace">replace all</option>
                        <option class="multi" value="delete">remove from</option>
                    </select>
                </td>
                <td>
                    <select class="fieldSelect" data-n="{{ n }}">
                        {% set sel="" %}
                        {% if n == up_paths|length %}
                            <option data-multi="0">select...</option>
                            {% if up_path.fields|length == 1 %}
                                {% set sel="selected" %}
                            {% endif %}
                        {% else %}
                            <option data-multi="0">none</option>
                        {% endif %}
                        {% for field in up_path.fields  %}
                            <option {{ sel }} data-multi="{{ field.is_multi() ? 1 : 0 }}" value="{{ field.get_name() }}">{{ field.get_name() }}</option>
                        {% endfor %}
                    </select>
                </td>
            </tr>
            {% set n = n+1 %}
        {% endfor %}
        </table>
    </form>
{% endif %}

{#
<script type="application/javascript">
    //let dlg = dialog.get({{ dlg_level }});
    // todo : find dlg container by .widget() ?
    //let $container = dlg.getDomElement().parent(); // the whole dlg, including title & buttons

    // todo : fix black-dialog-wrap
    // $container.addClass('black-dialog-wrap');
    // dlg.setOption("title", "editing {{ received_cnt }} record(s)");

    dlg.setOption("buttons",
        [
            {
                class: "fieldSelected",
                text: "Ok",
                style: "display:none",
                click: function() {
                    // don't submit the complex form, better build json
                    let data = [];
                    $(' .fieldSelect').filter(function () { return $(this).prop('selectedIndex')>0;}).each(function () {
                        let n = $(this).data('n');
                        let action = $(' .actionSelect._'+n+':visible', $container).val();
                        if(action === 'replace') {
                            // replace ll multi-v needs a "replace_by" arg
                            data.push({
                                'field_name':   $(this).val(),
                                'action':       action,
                                'replace_with': $(' .synonym._' + n, $container).val()
                            });
                        }
                        else {
                            data.push({
                                'field_name': $(this).val(),
                                'action':     action,
                                'value':      $(' .synonym._' + n, $container).val()
                            });
                        }
                    });
                    data = {
                        'records': {{ records|json_encode|raw }},
                        'actions': {
                            'metadatas': data
                        }
                    };

                    console.log(data);

                    $.ajax({
                            url: "{{ path('prod_edit_applyJSAction') }}",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(data),
                            success: function (data, textStatus) {
                                console.log(data);
                                dlg.close();
                            }
                        },
                    );
                }
            },
            {
                text: "Cancel",
                click: function() {
                    $( this ).dialog( "close" );
                }
            }
        ]
    );
*/


    // /**
    //  * when a destination field is changed, show/hide the "action" menus
    //  */
    // $(' .fieldSelect', $container)
    //     .change(function () {
    //         let n_changed = $(this).data('n');
    //
    //         // show "action" menus depending on the selected fields (none, mono, multi)
    //         let oneFieldSet = false;   // if at least one destination field is set, we will show some elements
    //         $(' .fieldSelect', $container).each(function () {
    //             let $this = $(this);
    //             let n = $this.data('n');
    //             let selIndex = $this.prop('selectedIndex');
    //             if(selIndex > 0) {
    //                 if(n === n_changed) {
    //                     // reset both mono an multi menus
    //                     $(' .actionSelect._'+n, $container).prop('selectedIndex', 0);
    //                 }
    //                 let multi = !!$('option:eq(' + selIndex + ')', $this).data('multi');
    //                 if(multi) {
    //                     $(' .actionSelect._'+n+'.mono', $container).hide();
    //                     $(' .actionSelect._'+n+'.multi', $container).show();
    //                 }
    //                 else {
    //                     $(' .actionSelect._'+n+'.multi', $container).hide();
    //                     $(' .actionSelect._'+n+'.mono', $container).show();
    //                 }
    //
    //                 oneFieldSet = true;
    //             }
    //             else {
    //                 // hide both menus
    //                 $(' .actionSelect._'+n).hide();
    //             }
    //         });
    //         $(' .fieldSelected', $container).toggle(oneFieldSet);
    //     })
    //     .change();  // enforce initial update


    $(' .moreFields BUTTON', $container).click(function () {
        $(' .moreFields', $container).hide();
        $(' .other', $container).show();
        return false;
    })

</script>

#}